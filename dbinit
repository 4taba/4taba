#!/usr/bin/env nix-shell
#!nix-shell -i python3 -p python36Packages.psycopg2

#!/usr/bin/python3

import psycopg2
import default_settings
import local_settings

from default_settings import *
from local_settings import *

temp = ["dbname='"+DBNAME+"'"] 
temp += ["user='"+DBUSER+"'"] if DBUSER else []
temp += ["host='"+DBHOST+"'"] if DBHOST else []
temp += ["password='"+DBPASS+"'"] if DBPASS else []
DBconnection = psycopg2.connect(' '.join(temp))
DBconnection.autocommit = True
cur = DBconnection.cursor()

cur.execute('DROP SCHEMA IF EXISTS main CASCADE;')
cur.execute('DROP SCHEMA IF EXISTS board CASCADE;')
cur.execute('DROP SCHEMA IF EXISTS thread CASCADE;')
cur.execute('DROP SCHEMA IF EXISTS sub CASCADE;')

#=====================

# main schema stores data about thread counts, cooldowns, and bans
cur.execute('CREATE SCHEMA main')
# board scheme stores board data
cur.execute('CREATE SCHEMA board')
# thread schema stores thread data
cur.execute('CREATE SCHEMA thread')
# sub schema stores sub-replies
cur.execute('CREATE SCHEMA sub')

# main.thread_cooldown stores thread cooldown timers
cur.execute('CREATE TABLE main.thread_cooldown (ip text, time integer);')
# main.post_cooldown stores post cooldown timers
cur.execute('CREATE TABLE main.post_cooldown (ip text, time integer);')
# main.mod is the list of moderators and their info
cur.execute('CREATE TABLE main.mod (name text, phash text, cookie text);')
# main.ban is the list of banned IP's
cur.execute('CREATE TABLE main.ban (ip text, boards text);')
# main.cookies stores session cookies
cur.execute('CREATE TABLE main.cookie (cookie text, last_checked integer);')
# main.reports stores reported posts
cur.execute('CREATE TABLE main.reports (board text, thread text, post text, reason text, date text);')
# main.event: new feature. Adds "reply events" to ip list to give some "watcher" functionality for browsers without Javascript
#             such as CLI browsers
cur.execute('CREATE TABLE main.event (ip text, event_list text[]);')

# board.listed contains all listed boards and needs to be initialized
cur.execute('CREATE TABLE board.listed (threadnum integer, last_post_time integer, bump_time integer, post_count integer, board text, creation_time integer, title text, imageAllow boolean, sticky boolean);')
# board.unlisted is the same as board.all but only for unlisted boards
cur.execute('CREATE TABLE board.unlisted (threadnum integer, last_post_time integer, bump_time integer, post_count integer, board text, creation_time integer, title text, imageAllow boolean, sticky boolean);')

DBconnection.commit()
print('done')
